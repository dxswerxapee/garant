import qrcode
import io
import random
import string
import hashlib
import secrets
from datetime import datetime, timedelta
from typing import Optional, Dict
from PIL import Image, ImageDraw, ImageFont
from config import TRC20_ADDRESS, TON_ADDRESS

class BotUtils:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞"""
    
    @staticmethod
    def generate_deal_code() -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∏"""
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    @staticmethod
    def hash_password(password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        salt = secrets.token_hex(16)
        return hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex() + ':' + salt
    
    @staticmethod
    def verify_password(password: str, hashed: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
        try:
            password_hash, salt = hashed.split(':')
            return hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000).hex() == password_hash
        except:
            return False
    
    @staticmethod
    def generate_qr_code(address: str, amount: float, payment_method: str) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        if payment_method == "TRC20":
            # –§–æ—Ä–º–∞—Ç –¥–ª—è USDT TRC20
            qr_data = f"tron:{address}?amount={amount}&token=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t"
        elif payment_method == "TON":
            # –§–æ—Ä–º–∞—Ç –¥–ª—è TON
            qr_data = f"ton://transfer/{address}?amount={int(amount * 1000000000)}&text=Deal_Payment"
        else:
            qr_data = address
        
        # –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(qr_data)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã
        bio = io.BytesIO()
        img.save(bio, format='PNG')
        bio.seek(0)
        
        return bio
    
    @staticmethod
    def format_user_info(user_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        username = f"@{user_data['username']}" if user_data['username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        full_name = f"{user_data['first_name'] or ''} {user_data['last_name'] or ''}".strip()
        
        rating_stars = "‚≠ê" * int(user_data['rating']) + "‚òÜ" * (5 - int(user_data['rating']))
        
        return f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üÜî ID: `{user_data['user_id']}`
üë§ –ò–º—è: {full_name}
üìù Username: {username}
‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–î–∞' if user_data['is_verified'] else '–ù–µ—Ç'}
üíº –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {user_data['deals_count']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {user_data['successful_deals']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({user_data['rating']}/5.0)
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}
"""
    
    @staticmethod
    def format_deal_info(deal_data: Dict, current_user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ"""
        status_emoji = {
            'created': 'üü° –°–æ–∑–¥–∞–Ω–∞',
            'joined': 'üîµ –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω',
            'payment_pending': 'üü† –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
            'disputed': 'üî¥ –°–ø–æ—Ä'
        }.get(deal_data['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        role_emoji = {
            'buyer': 'üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å',
            'seller': 'üíé –ü—Ä–æ–¥–∞–≤–µ—Ü'
        }.get(deal_data['creator_role'], '‚ùì')
        
        participant_role = 'üíé –ü—Ä–æ–¥–∞–≤–µ—Ü' if deal_data['creator_role'] == 'buyer' else 'üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å'
        
        is_creator = deal_data['creator_id'] == current_user_id
        user_role = role_emoji if is_creator else participant_role
        
        payment_method = f"üí≥ {deal_data['payment_method']}" if deal_data['payment_method'] else "–ù–µ –≤—ã–±—Ä–∞–Ω"
        
        return f"""
üíº **–°–¥–µ–ª–∫–∞ #{deal_data['deal_code']}**

üìä –°—Ç–∞—Ç—É—Å: {status_emoji}
üë§ –í–∞—à–∞ —Ä–æ–ª—å: {user_role}
üí∞ –°—É–º–º–∞: ${deal_data['amount_usd']}
üìã –£—Å–ª–æ–≤–∏—è: {deal_data['deal_conditions']}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal_data['created_at'].strftime('%d.%m.%Y %H:%M')}
‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {deal_data['expires_at'].strftime('%d.%m.%Y %H:%M')}
"""
    
    @staticmethod
    def get_payment_address(payment_method: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
        if payment_method == "TRC20":
            return TRC20_ADDRESS
        elif payment_method == "TON":
            return TON_ADDRESS
        return ""
    
    @staticmethod
    def validate_amount(amount_str: str) -> Optional[float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã"""
        try:
            amount = float(amount_str)
            if amount <= 0:
                return None
            if amount > 100000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
                return None
            return round(amount, 2)
        except ValueError:
            return None
    
    @staticmethod
    def validate_password(password: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å–¥–µ–ª–∫–∏"""
        if len(password) < 4:
            return False
        if len(password) > 50:
            return False
        return True
    
    @staticmethod
    def format_time_left(expires_at: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()
        if expires_at <= now:
            return "‚è∞ –ò—Å—Ç–µ–∫–ª–æ"
        
        time_left = expires_at - now
        hours = time_left.seconds // 3600
        minutes = (time_left.seconds % 3600) // 60
        
        if time_left.days > 0:
            return f"‚è∞ {time_left.days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"‚è∞ {hours}—á {minutes}–º"
        else:
            return f"‚è∞ {minutes}–º"
    
    @staticmethod
    def create_deal_link(bot_username: str, deal_code: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫—É"""
        return f"https://t.me/{bot_username}?start=deal_{deal_code}"
    
    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text
    
    @staticmethod
    def get_deal_expiry_time() -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        return datetime.now() + timedelta(hours=24)  # –°–¥–µ–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞
    
    @staticmethod
    def generate_secure_token() -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        return secrets.token_urlsafe(32)
    
    @staticmethod
    def format_currency(amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        return f"${amount:,.2f}"
    
    @staticmethod
    def validate_username(username: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è username"""
        if not username:
            return False
        if len(username) < 5 or len(username) > 32:
            return False
        if not username.replace('_', '').isalnum():
            return False
        return True
    
    @staticmethod
    def get_status_color(status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        colors = {
            'created': 'üü°',
            'joined': 'üîµ',
            'payment_pending': 'üü†',
            'completed': 'üü¢',
            'cancelled': 'üî¥',
            'disputed': 'üü£'
        }
        return colors.get(status, '‚ö™')

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É—Ç–∏–ª–∏—Ç
utils = BotUtils()