import logging
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db
from captcha import captcha_system
from keyboards import keyboards
from utils import utils
from config import SUPPORT_USERNAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DealStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_conditions = State()
    waiting_for_password = State()
    waiting_for_join_password = State()

class CaptchaStates(StatesGroup):
    waiting_for_captcha = State()

# === –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.create_user(user_id, username, first_name, last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É)
    args = message.text.split()
    if len(args) > 1 and args[1].startswith('deal_'):
        deal_code = args[1][5:]  # –£–±–∏—Ä–∞–µ–º 'deal_'
        await handle_deal_join(message, deal_code, state)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user['is_verified']:
        await start_captcha_verification(message, state)
    else:
        await show_welcome_message(message)

async def start_captcha_verification(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–ø—á–µ–π"""
    captcha_data = captcha_system.generate_captcha()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ø—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.create_captcha_session(
        user_id=message.from_user.id,
        captcha_type=captcha_data['type'],
        correct_answer=captcha_data['correct_answer'],
        expires_at=captcha_data['expires_at']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = keyboards.get_captcha_keyboard(captcha_data['emoji_options'])
    
    await message.answer(
        f"üõ°Ô∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OZER GARANT!**\n\n"
        f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É:\n\n"
        f"{captcha_data['question']}",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await state.set_state(CaptchaStates.waiting_for_captcha)

async def show_welcome_message(message: Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    welcome_text = f"""
üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OZER GARANT!**

üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π!

üíº **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ TRC20 USDT –∏ TON
‚Ä¢ 24/7 —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
"""
    
    await message.answer(
        welcome_text,
        reply_markup=keyboards.get_main_menu(),
        parse_mode="Markdown"
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–ü–ß–ò ===

@router.callback_query(F.data.startswith("captcha_"), StateFilter(CaptchaStates.waiting_for_captcha))
async def process_captcha_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É"""
    user_id = callback.from_user.id
    answer_index = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–ø—á–∏
    captcha_session = await db.get_captcha_session(user_id)
    
    if not captcha_session:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–∞!", show_alert=True)
        await cmd_start(callback.message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ø—á—É –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
    captcha_data = captcha_system.generate_captcha()
    user_answer = captcha_data['options'][answer_index] if answer_index < len(captcha_data['options']) else ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if captcha_system.verify_answer(user_answer, captcha_session['correct_answer']):
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await db.solve_captcha(captcha_session['id'])
        await db.verify_user(user_id)
        
        await callback.message.edit_text(
            "‚úÖ **–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OZER GARANT!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            parse_mode="Markdown"
        )
        
        await show_welcome_message(callback.message)
        await state.clear()
        
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        attempts = captcha_session['attempts'] + 1
        await db.update_captcha_attempts(captcha_session['id'], attempts)
        
        if attempts >= 3:
            await callback.message.edit_text(
                "‚ùå **–ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!**\n\n"
                "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
            await state.clear()
        else:
            await callback.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}",
                show_alert=True
            )

# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@router.message(F.text == "üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
async def create_deal_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    user = await db.get_user(message.from_user.id)
    
    if not user['is_verified']:
        await message.answer(
            "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏."
        )
        return
    
    await message.answer(
        "üíº **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ —Å–¥–µ–ª–∫–µ:",
        reply_markup=keyboards.get_role_selection(),
        parse_mode="Markdown"
    )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(message.from_user.id)
    
    if user:
        profile_text = utils.format_user_info(user)
        await message.answer(profile_text, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@router.message(F.text == "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
async def show_my_deals(message: Message):
    """–ü–æ–∫–∞–∑ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    deals = await db.get_user_deals(message.from_user.id)
    
    if not deals:
        await message.answer(
            "üìã **–ú–æ–∏ —Å–¥–µ–ª–∫–∏**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–∏."
        )
        return
    
    await message.answer(
        "üìã **–ú–æ–∏ —Å–¥–µ–ª–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboards.get_deals_list_keyboard(deals),
        parse_mode="Markdown"
    )

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    support_text = f"""
üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**

üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**
‚Ä¢ Telegram: @{SUPPORT_USERNAME}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?
‚Ä¢ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É?
‚Ä¢ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–ø–æ—Ä?
‚Ä¢ –ö–∞–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏?

üí° **–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:**
‚Ä¢ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–∞—Ä–æ–ª–∏ —Å–¥–µ–ª–∫–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç—ã
"""
    
    await message.answer(
        support_text,
        reply_markup=keyboards.get_support_keyboard(),
        parse_mode="Markdown"
    )

# === –°–û–ó–î–ê–ù–ò–ï –°–î–ï–õ–ö–ò ===

@router.callback_query(F.data.startswith("role_"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = callback.data.split("_")[1]
    
    if role == "buyer":
        role_text = "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
        role_value = "buyer"
    elif role == "seller":
        role_text = "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü"
        role_value = "seller"
    else:
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(role=role_value)
    
    await callback.message.edit_text(
        f"üíº **–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏**\n\n"
        f"üë§ –†–æ–ª—å: {role_text}\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ USD:\n"
        f"(–ú–∏–Ω–∏–º—É–º: $1, –ú–∞–∫—Å–∏–º—É–º: $100,000)",
        reply_markup=keyboards.get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(DealStates.waiting_for_amount)

@router.message(StateFilter(DealStates.waiting_for_amount))
async def process_deal_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏"""
    amount = utils.validate_amount(message.text)
    
    if amount is None:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç $1 –¥–æ $100,000:",
            reply_markup=keyboards.get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    await state.update_data(amount=amount)
    
    await message.answer(
        f"üíº **–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏**\n\n"
        f"üí∞ –°—É–º–º–∞: ${amount}\n\n"
        f"üìã –í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:\n"
        f"(–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç–µ/–ø–æ–∫—É–ø–∞–µ—Ç–µ, —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏)",
        reply_markup=keyboards.get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(DealStates.waiting_for_conditions)

@router.message(StateFilter(DealStates.waiting_for_conditions))
async def process_deal_conditions(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏"""
    conditions = message.text.strip()
    
    if len(conditions) < 10:
        await message.answer(
            "‚ùå –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ!\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=keyboards.get_cancel_keyboard()
        )
        return
    
    if len(conditions) > 1000:
        await message.answer(
            "‚ùå –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ!\n\n"
            "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=keyboards.get_cancel_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è
    await state.update_data(conditions=conditions)
    
    await message.answer(
        f"üíº **–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏**\n\n"
        f"üìã –£—Å–ª–æ–≤–∏—è: {conditions[:100]}...\n\n"
        f"üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–¥–µ–ª–∫–∏:\n"
        f"(4-50 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)",
        reply_markup=keyboards.get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(DealStates.waiting_for_password)

@router.message(StateFilter(DealStates.waiting_for_password))
async def process_deal_password(message: Message, state: FSMContext, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    password = message.text.strip()
    
    if not utils.validate_password(password):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n\n"
            "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:",
            reply_markup=keyboards.get_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å–¥–µ–ª–∫–∏
    deal_code = utils.generate_deal_code()
    
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = utils.hash_password(password)
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    expires_at = utils.get_deal_expiry_time()
    
    deal_id = await db.create_deal(
        creator_id=message.from_user.id,
        creator_role=data['role'],
        amount_usd=data['amount'],
        conditions=data['conditions'],
        password=hashed_password,
        deal_code=deal_code,
        expires_at=expires_at
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    bot_info = await bot.get_me()
    deal_link = utils.create_deal_link(bot_info.username, deal_code)
    
    role_text = "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å" if data['role'] == "buyer" else "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü"
    
    success_text = f"""
‚úÖ **–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

üíº **–ö–æ–¥ —Å–¥–µ–ª–∫–∏:** `{deal_code}`
üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {role_text}
üí∞ **–°—É–º–º–∞:** ${data['amount']}
üìã **–£—Å–ª–æ–≤–∏—è:** {data['conditions'][:100]}...
üîê **–ü–∞—Ä–æ–ª—å:** `{password}`

üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:**
{deal_link}

‚è∞ **–°–¥–µ–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {expires_at.strftime('%d.%m.%Y %H:%M')}

üìù **–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –ü–∞—Ä—Ç–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å: `{password}`
3. –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–µ–ª–∫–∏
"""
    
    await message.answer(
        success_text,
        parse_mode="Markdown",
        reply_markup=keyboards.get_main_menu()
    )
    
    await state.clear()

# === –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –°–î–ï–õ–ö–ï ===

async def handle_deal_join(message: Message, deal_code: str, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É –ø–æ –∫–æ–¥—É
    deal = await db.get_deal_by_code(deal_code)
    
    if not deal:
        await message.answer(
            "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."
        )
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏
    if deal['creator_id'] == user_id:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
    if deal['status'] != 'created':
        status_text = {
            'joined': '—É–∂–µ –∏–º–µ–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            'payment_pending': '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã',
            'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω–∞',
            'disputed': '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–æ—Ä–µ'
        }.get(deal['status'], '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        
        await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ {status_text}!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if deal['expires_at'] <= datetime.now():
        await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–¥–µ–ª–∫–∏ –∏—Å—Ç–µ–∫!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    role_text = "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å" if deal['creator_role'] == "buyer" else "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü"
    partner_role = "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü" if deal['creator_role'] == "buyer" else "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    
    deal_info = f"""
üíº **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ #{deal_code}**

üë§ **–†–æ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è:** {role_text}
üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {partner_role}
üí∞ **–°—É–º–º–∞:** ${deal['amount_usd']}
üìã **–£—Å–ª–æ–≤–∏—è:** {deal['deal_conditions']}
‚è∞ **–ò—Å—Ç–µ–∫–∞–µ—Ç:** {deal['expires_at'].strftime('%d.%m.%Y %H:%M')}

üîê **–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**
"""
    
    await message.answer(
        deal_info,
        reply_markup=keyboards.get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å–¥–µ–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(deal_code=deal_code)
    await state.set_state(DealStates.waiting_for_join_password)

@router.message(StateFilter(DealStates.waiting_for_join_password))
async def process_join_password(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ"""
    password = message.text.strip()
    data = await state.get_data()
    deal_code = data['deal_code']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É
    deal = await db.get_deal_by_code(deal_code)
    
    if not deal:
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if not utils.verify_password(password, deal['deal_password']):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=keyboards.get_cancel_keyboard()
        )
        return
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–¥–µ–ª–∫–µ
    await db.join_deal(deal['id'], message.from_user.id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–¥–µ–ª–∫–∏
    creator_role = "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å" if deal['creator_role'] == "buyer" else "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü"
    participant_role = "üíé –ü—Ä–æ–¥–∞–≤–µ—Ü" if deal['creator_role'] == "buyer" else "üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
    
    creator_notification = f"""
üéâ **–ö –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä!**

üíº **–°–¥–µ–ª–∫–∞:** #{deal_code}
üë§ **–ü–∞—Ä—Ç–Ω–µ—Ä:** {message.from_user.first_name}
üí∞ **–°—É–º–º–∞:** ${deal['amount_usd']}
üìã **–£—Å–ª–æ–≤–∏—è:** {deal['deal_conditions'][:100]}...

üîÑ **–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:**
–ï—Å–ª–∏ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü - –æ–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
"""
    
    try:
        await bot.send_message(
            deal['creator_id'],
            creator_notification,
            parse_mode="Markdown"
        )
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è
    participant_notification = f"""
‚úÖ **–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!**

üíº **–°–¥–µ–ª–∫–∞:** #{deal_code}
üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {participant_role}
üí∞ **–°—É–º–º–∞:** ${deal['amount_usd']}
üìã **–£—Å–ª–æ–≤–∏—è:** {deal['deal_conditions'][:100]}...

üîÑ **–ß—Ç–æ –¥–∞–ª—å—à–µ:**
–û–∂–∏–¥–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏.
"""
    
    await message.answer(
        participant_notification,
        parse_mode="Markdown",
        reply_markup=keyboards.get_main_menu()
    )
    
    # –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    if deal['creator_role'] == 'buyer':
        payment_text = f"""
üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal_code}**

üí∞ **–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:** ${deal['amount_usd']}

üîó **TRC20 USDT** - USDT –≤ —Å–µ—Ç–∏ TRON
üíé **TON** - The Open Network

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±:
"""
        
        try:
            await bot.send_message(
                deal['creator_id'],
                payment_text,
                reply_markup=keyboards.get_payment_methods(),
                parse_mode="Markdown"
            )
        except:
            pass
    
    await state.clear()

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–õ–ê–¢–´ ===

@router.callback_query(F.data.startswith("payment_"))
async def process_payment_method(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split("_")[1]
    
    if payment_method == "cancel":
        await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ –æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
    user_deals = await db.get_user_deals(callback.from_user.id)
    active_deal = None
    
    for deal in user_deals:
        if deal['status'] == 'joined':
            deal_full = await db.get_deal_by_code(deal['deal_code'])
            if deal_full['creator_id'] == callback.from_user.id and deal_full['creator_role'] == 'buyer':
                active_deal = deal_full
                break
    
    if not active_deal:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    await db.set_payment_method(active_deal['id'], payment_method)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_address = utils.get_payment_address(payment_method)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
    qr_code = utils.generate_qr_code(payment_address, active_deal['amount_usd'], payment_method)
    
    payment_text = f"""
üí≥ **–û–ø–ª–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ #{active_deal['deal_code']}**

üí∞ **–°—É–º–º–∞:** ${active_deal['amount_usd']}
üîó **–°–ø–æ—Å–æ–±:** {payment_method}
üìç **–ê–¥—Ä–µ—Å:** `{payment_address}`

‚ö†Ô∏è **–í–ê–ñ–ù–û:**
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¢–û–ß–ù–£–Æ —Å—É–º–º—É: ${active_deal['amount_usd']}
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"

üì± **QR –∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã:**
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR –∫–æ–¥
    qr_photo = BufferedInputFile(qr_code.read(), filename="payment_qr.png")
    
    await callback.message.answer_photo(
        photo=qr_photo,
        caption=payment_text,
        reply_markup=keyboards.get_qr_payment_keyboard(),
        parse_mode="Markdown"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    seller_id = active_deal['participant_id']
    seller_notification = f"""
üí≥ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã**

üíº **–°–¥–µ–ª–∫–∞:** #{active_deal['deal_code']}
üí∞ **–°—É–º–º–∞:** ${active_deal['amount_usd']}
üîó **–°–ø–æ—Å–æ–±:** {payment_method}

‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
"""
    
    try:
        await bot.send_message(
            seller_id,
            seller_notification,
            parse_mode="Markdown"
        )
    except:
        pass
    
    await callback.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "payment_completed")
async def process_payment_completed(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_deals = await db.get_user_deals(callback.from_user.id)
    active_deal = None
    
    for deal in user_deals:
        if deal['status'] == 'payment_pending':
            deal_full = await db.get_deal_by_code(deal['deal_code'])
            if deal_full['creator_id'] == callback.from_user.id:
                active_deal = deal_full
                break
    
    if not active_deal:
        await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    await db.update_deal_status(active_deal['id'], 'completed')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer_notification = f"""
‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**

üíº **–°–¥–µ–ª–∫–∞ #{active_deal['deal_code']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
üí∞ **–°—É–º–º–∞:** ${active_deal['amount_usd']}

üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OZER GARANT!
–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.

‚≠ê –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞!
"""
    
    await callback.message.edit_text(
        buyer_notification,
        parse_mode="Markdown"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    seller_notification = f"""
‚úÖ **–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üíº **–°–¥–µ–ª–∫–∞ #{active_deal['deal_code']}**
üí∞ **–°—É–º–º–∞:** ${active_deal['amount_usd']}

üéâ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É!
–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.

üíº –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
"""
    
    try:
        await bot.send_message(
            active_deal['participant_id'],
            seller_notification,
            parse_mode="Markdown"
        )
    except:
        pass
    
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)

# === –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô ===

@router.callback_query(F.data.in_(["cancel_action", "cancel_deal_creation", "cancel_payment"]))
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
    )

@router.callback_query(F.data == "cancel_deal")
async def cancel_deal(callback: CallbackQuery, bot: Bot):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
    await callback.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "show_faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ FAQ"""
    faq_text = """
‚ùì **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**

**Q: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É?**
A: –ù–∞–∂–º–∏—Ç–µ "üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, —É—Å–ª–æ–≤–∏—è –∏ –ø–∞—Ä–æ–ª—å.

**Q: –ö–∞–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–¥–µ–ª–∫–µ?**
A: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–¥–µ–ª–∫–∏.

**Q: –ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**
A: TRC20 USDT –∏ TON.

**Q: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É?**
A: –î–∞, –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.

**Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–¥–µ–ª–∫–∞?**
A: 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è.

**Q: –ï—Å—Ç—å –ª–∏ –∫–æ–º–∏—Å—Å–∏—è?**
A: –°–µ—Ä–≤–∏—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∫–æ–º–∏—Å—Å–∏—è —Ç–æ–ª—å–∫–æ —Å–µ—Ç–∏.
"""
    
    await callback.message.edit_text(
        faq_text,
        reply_markup=keyboards.get_support_keyboard(),
        parse_mode="Markdown"
    )

# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ['router']