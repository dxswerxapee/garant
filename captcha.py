import random
import secrets
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
from PIL import Image, ImageDraw, ImageFont
import io
import base64

class CaptchaSystem:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–ø—á–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    
    def __init__(self):
        self.colors = {
            '–∫—Ä–∞—Å–Ω—ã–π': 'üî¥',
            '—Å–∏–Ω–∏–π': 'üîµ', 
            '–∑–µ–ª–µ–Ω—ã–π': 'üü¢',
            '–∂–µ–ª—Ç—ã–π': 'üü°',
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': 'üü£',
            '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': 'üü†',
            '—á–µ—Ä–Ω—ã–π': '‚ö´',
            '–±–µ–ª—ã–π': '‚ö™'
        }
        
        self.animals = {
            '–∫–æ—Ç': 'üê±',
            '—Å–æ–±–∞–∫–∞': 'üê∂',
            '—Å–ª–æ–Ω': 'üêò',
            '–ª–µ–≤': 'ü¶Å',
            '–æ–±–µ–∑—å—è–Ω–∞': 'üêµ',
            '–º–µ–¥–≤–µ–¥—å': 'üêª',
            '–ª–∏—Å–∞': 'ü¶ä',
            '–≤–æ–ª–∫': 'üê∫',
            '—Ç–∏–≥—Ä': 'üêØ',
            '–ø–∞–Ω–¥–∞': 'üêº'
        }
        
        self.objects = {
            '–¥–æ–º': 'üè†',
            '–º–∞—à–∏–Ω–∞': 'üöó',
            '—Å–∞–º–æ–ª–µ—Ç': '‚úàÔ∏è',
            '–∫–æ—Ä–∞–±–ª—å': 'üö¢',
            '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 'üö≤',
            '–ø–æ–µ–∑–¥': 'üöÇ',
            '—Ä–∞–∫–µ—Ç–∞': 'üöÄ',
            '–≤–µ—Ä—Ç–æ–ª–µ—Ç': 'üöÅ',
            '–∞–≤—Ç–æ–±—É—Å': 'üöå',
            '–º–æ—Ç–æ—Ü–∏–∫–ª': 'üèçÔ∏è'
        }
        
        self.numbers = {
            '–æ–¥–∏–Ω': '1Ô∏è‚É£',
            '–¥–≤–∞': '2Ô∏è‚É£',
            '—Ç—Ä–∏': '3Ô∏è‚É£',
            '—á–µ—Ç—ã—Ä–µ': '4Ô∏è‚É£',
            '–ø—è—Ç—å': '5Ô∏è‚É£',
            '—à–µ—Å—Ç—å': '6Ô∏è‚É£',
            '—Å–µ–º—å': '7Ô∏è‚É£',
            '–≤–æ—Å–µ–º—å': '8Ô∏è‚É£',
            '–¥–µ–≤—è—Ç—å': '9Ô∏è‚É£',
            '–Ω–æ–ª—å': '0Ô∏è‚É£'
        }
    
    def generate_color_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞"""
        correct_color = random.choice(list(self.colors.keys()))
        wrong_colors = random.sample([c for c in self.colors.keys() if c != correct_color], 3)
        
        options = [correct_color] + wrong_colors
        random.shuffle(options)
        
        question = f"üé® –í—ã–±–µ—Ä–∏—Ç–µ {correct_color} —Ü–≤–µ—Ç:"
        
        return question, correct_color, options
    
    def generate_animal_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –≤—ã–±–æ—Ä–æ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        correct_animal = random.choice(list(self.animals.keys()))
        wrong_animals = random.sample([a for a in self.animals.keys() if a != correct_animal], 3)
        
        options = [correct_animal] + wrong_animals
        random.shuffle(options)
        
        question = f"üêæ –ù–∞–π–¥–∏—Ç–µ {correct_animal}:"
        
        return question, correct_animal, options
    
    def generate_object_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ–±—ä–µ–∫—Ç–∞"""
        correct_object = random.choice(list(self.objects.keys()))
        wrong_objects = random.sample([o for o in self.objects.keys() if o != correct_object], 3)
        
        options = [correct_object] + wrong_objects
        random.shuffle(options)
        
        question = f"üîç –í—ã–±–µ—Ä–∏—Ç–µ {correct_object}:"
        
        return question, correct_object, options
    
    def generate_number_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –≤—ã–±–æ—Ä–æ–º —á–∏—Å–ª–∞"""
        correct_number = random.choice(list(self.numbers.keys()))
        wrong_numbers = random.sample([n for n in self.numbers.keys() if n != correct_number], 3)
        
        options = [correct_number] + wrong_numbers
        random.shuffle(options)
        
        question = f"üî¢ –ù–∞–π–¥–∏—Ç–µ —á–∏—Å–ª–æ {correct_number}:"
        
        return question, correct_number, options
    
    def generate_math_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏"""
        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        operation = random.choice(['+', '-', '*'])
        
        if operation == '+':
            correct_answer = str(num1 + num2)
            question = f"üßÆ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} + {num2}?"
        elif operation == '-':
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            if num1 < num2:
                num1, num2 = num2, num1
            correct_answer = str(num1 - num2)
            question = f"üßÆ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} - {num2}?"
        else:  # multiplication
            correct_answer = str(num1 * num2)
            question = f"üßÆ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} √ó {num2}?"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        wrong_answers = []
        while len(wrong_answers) < 3:
            wrong = str(random.randint(1, 50))
            if wrong != correct_answer and wrong not in wrong_answers:
                wrong_answers.append(wrong)
        
        options = [correct_answer] + wrong_answers
        random.shuffle(options)
        
        return question, correct_answer, options
    
    def generate_sequence_captcha(self) -> Tuple[str, str, List[str]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
        start = random.randint(1, 5)
        step = random.randint(2, 4)
        sequence = [start + i * step for i in range(4)]
        next_number = str(start + 4 * step)
        
        question = f"üî¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {', '.join(map(str, sequence))}, ?"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        wrong_answers = []
        while len(wrong_answers) < 3:
            wrong = str(random.randint(1, 50))
            if wrong != next_number and wrong not in wrong_answers:
                wrong_answers.append(wrong)
        
        options = [next_number] + wrong_answers
        random.shuffle(options)
        
        return question, next_number, options
    
    def generate_captcha(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞–ø—á–∏"""
        captcha_types = [
            'color', 'animal', 'object', 'number', 'math', 'sequence'
        ]
        
        captcha_type = random.choice(captcha_types)
        
        if captcha_type == 'color':
            question, answer, options = self.generate_color_captcha()
            emoji_options = [f"{self.colors[opt]} {opt}" for opt in options]
        elif captcha_type == 'animal':
            question, answer, options = self.generate_animal_captcha()
            emoji_options = [f"{self.animals[opt]} {opt}" for opt in options]
        elif captcha_type == 'object':
            question, answer, options = self.generate_object_captcha()
            emoji_options = [f"{self.objects[opt]} {opt}" for opt in options]
        elif captcha_type == 'number':
            question, answer, options = self.generate_number_captcha()
            emoji_options = [f"{self.numbers[opt]} {opt}" for opt in options]
        elif captcha_type == 'math':
            question, answer, options = self.generate_math_captcha()
            emoji_options = [f"üî¢ {opt}" for opt in options]
        else:  # sequence
            question, answer, options = self.generate_sequence_captcha()
            emoji_options = [f"‚û°Ô∏è {opt}" for opt in options]
        
        return {
            'type': captcha_type,
            'question': question,
            'correct_answer': answer,
            'options': options,
            'emoji_options': emoji_options,
            'created_at': datetime.now(),
            'expires_at': datetime.now() + timedelta(minutes=1)
        }
    
    def verify_answer(self, user_answer: str, correct_answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_answer.lower().strip() == correct_answer.lower().strip()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏
captcha_system = CaptchaSystem()